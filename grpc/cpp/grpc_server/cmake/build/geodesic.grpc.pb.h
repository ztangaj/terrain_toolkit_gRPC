// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: geodesic.proto
#ifndef GRPC_geodesic_2eproto__INCLUDED
#define GRPC_geodesic_2eproto__INCLUDED

#include "geodesic.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace geodesic_gRPC {

// The greeting service definition.
class Geodesic final {
 public:
  static constexpr char const* service_full_name() {
    return "geodesic_gRPC.Geodesic";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting, dummy
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::geodesic_gRPC::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // request shortest path using vertex id
    virtual ::grpc::Status FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::geodesic_gRPC::Path* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>> AsyncFindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>>(AsyncFindPathByVertexCordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>> PrepareAsyncFindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>>(PrepareAsyncFindPathByVertexCordRaw(context, request, cq));
    }
    // terrain information in json format
    // rpc GetTerrainInfo(HelloRequest) returns(TerrainInfo) {}
    // produce a .graph file and .off file of the simplified terrain based on beta param
    virtual ::grpc::Status SimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::geodesic_gRPC::ModelPath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>> AsyncSimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>>(AsyncSimplifyTerrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>> PrepareAsyncSimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>>(PrepareAsyncSimplifyTerrainRaw(context, request, cq));
    }
    // load the mesh in c++ for terrain info and shortest path computation
    virtual ::grpc::Status LoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::geodesic_gRPC::TerrainInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>> AsyncLoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>>(AsyncLoadModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>> PrepareAsyncLoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>>(PrepareAsyncLoadModelRaw(context, request, cq));
    }
    // get the content, save it to a file and return the path, since browser cannot do so due to security reason
    // TODO: implement a stream rpc, this function can only deal with small file
    std::unique_ptr< ::grpc::ClientWriterInterface< ::geodesic_gRPC::ModelContent>> UploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::geodesic_gRPC::ModelContent>>(UploadModelContentRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>> AsyncUploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>>(AsyncUploadModelContentRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>> PrepareAsyncUploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>>(PrepareAsyncUploadModelContentRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting, dummy
      virtual void SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      // request shortest path using vertex id
      virtual void FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindPathByVertexCord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) = 0;
      // terrain information in json format
      // rpc GetTerrainInfo(HelloRequest) returns(TerrainInfo) {}
      // produce a .graph file and .off file of the simplified terrain based on beta param
      virtual void SimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SimplifyTerrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::ModelPath* response, std::function<void(::grpc::Status)>) = 0;
      // load the mesh in c++ for terrain info and shortest path computation
      virtual void LoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::TerrainInfo* response, std::function<void(::grpc::Status)>) = 0;
      // get the content, save it to a file and return the path, since browser cannot do so due to security reason
      // TODO: implement a stream rpc, this function can only deal with small file
      virtual void UploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::experimental::ClientWriteReactor< ::geodesic_gRPC::ModelContent>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>* AsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>* PrepareAsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>* AsyncSimplifyTerrainRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::ModelPath>* PrepareAsyncSimplifyTerrainRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>* AsyncLoadModelRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::TerrainInfo>* PrepareAsyncLoadModelRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::geodesic_gRPC::ModelContent>* UploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>* AsyncUploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::geodesic_gRPC::ModelContent>* PrepareAsyncUploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::geodesic_gRPC::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::geodesic_gRPC::Path* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>> AsyncFindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>>(AsyncFindPathByVertexCordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>> PrepareAsyncFindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>>(PrepareAsyncFindPathByVertexCordRaw(context, request, cq));
    }
    ::grpc::Status SimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::geodesic_gRPC::ModelPath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>> AsyncSimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>>(AsyncSimplifyTerrainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>> PrepareAsyncSimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>>(PrepareAsyncSimplifyTerrainRaw(context, request, cq));
    }
    ::grpc::Status LoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::geodesic_gRPC::TerrainInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>> AsyncLoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>>(AsyncLoadModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>> PrepareAsyncLoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>>(PrepareAsyncLoadModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::geodesic_gRPC::ModelContent>> UploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::geodesic_gRPC::ModelContent>>(UploadModelContentRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>> AsyncUploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>>(AsyncUploadModelContentRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>> PrepareAsyncUploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>>(PrepareAsyncUploadModelContentRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) override;
      void FindPathByVertexCord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) override;
      void SimplifyTerrain(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response, std::function<void(::grpc::Status)>) override;
      void SimplifyTerrain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::ModelPath* response, std::function<void(::grpc::Status)>) override;
      void LoadModel(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response, std::function<void(::grpc::Status)>) override;
      void LoadModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::TerrainInfo* response, std::function<void(::grpc::Status)>) override;
      void UploadModelContent(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::experimental::ClientWriteReactor< ::geodesic_gRPC::ModelContent>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* AsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* PrepareAsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>* AsyncSimplifyTerrainRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::ModelPath>* PrepareAsyncSimplifyTerrainRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>* AsyncLoadModelRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::TerrainInfo>* PrepareAsyncLoadModelRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::ModelPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::geodesic_gRPC::ModelContent>* UploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response) override;
    ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>* AsyncUploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::geodesic_gRPC::ModelContent>* PrepareAsyncUploadModelContentRaw(::grpc::ClientContext* context, ::geodesic_gRPC::ModelPath* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_FindPathByVertexCord_;
    const ::grpc::internal::RpcMethod rpcmethod_SimplifyTerrain_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadModel_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadModelContent_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting, dummy
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response);
    // request shortest path using vertex id
    virtual ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response);
    // terrain information in json format
    // rpc GetTerrainInfo(HelloRequest) returns(TerrainInfo) {}
    // produce a .graph file and .off file of the simplified terrain based on beta param
    virtual ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response);
    // load the mesh in c++ for terrain info and shortest path computation
    virtual ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response);
    // get the content, save it to a file and return the path, since browser cannot do so due to security reason
    // TODO: implement a stream rpc, this function can only deal with small file
    virtual ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::geodesic_gRPC::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FindPathByVertexCord() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByVertexCord(::grpc::ServerContext* context, ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::Path>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SimplifyTerrain() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimplifyTerrain(::grpc::ServerContext* context, ::geodesic_gRPC::SimplifyTerrainRequest* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::ModelPath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadModel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModel(::grpc::ServerContext* context, ::geodesic_gRPC::ModelPath* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::TerrainInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadModelContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UploadModelContent() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UploadModelContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadModelContent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::geodesic_gRPC::ModelPath, ::geodesic_gRPC::ModelContent>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_FindPathByVertexCord<WithAsyncMethod_SimplifyTerrain<WithAsyncMethod_LoadModel<WithAsyncMethod_UploadModelContent<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::HelloRequest, ::geodesic_gRPC::HelloReply>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::HelloRequest* request,
                 ::geodesic_gRPC::HelloReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FindPathByVertexCord() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::FindPathByVertexCordRequest, ::geodesic_gRPC::Path>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::FindPathByVertexCordRequest* request,
                 ::geodesic_gRPC::Path* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FindPathByVertexCord(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SimplifyTerrain() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::SimplifyTerrainRequest, ::geodesic_gRPC::ModelPath>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::SimplifyTerrainRequest* request,
                 ::geodesic_gRPC::ModelPath* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SimplifyTerrain(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LoadModel() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::ModelPath, ::geodesic_gRPC::TerrainInfo>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::ModelPath* request,
                 ::geodesic_gRPC::TerrainInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LoadModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadModelContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UploadModelContent() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackClientStreamingHandler< ::geodesic_gRPC::ModelContent, ::geodesic_gRPC::ModelPath>(
          [this] { return this->UploadModelContent(); }));
    }
    ~ExperimentalWithCallbackMethod_UploadModelContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::geodesic_gRPC::ModelContent, ::geodesic_gRPC::ModelPath>* UploadModelContent() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::geodesic_gRPC::ModelContent, ::geodesic_gRPC::ModelPath>;}
  };
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_FindPathByVertexCord<ExperimentalWithCallbackMethod_SimplifyTerrain<ExperimentalWithCallbackMethod_LoadModel<ExperimentalWithCallbackMethod_UploadModelContent<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FindPathByVertexCord() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SimplifyTerrain() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadModel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadModelContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UploadModelContent() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UploadModelContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FindPathByVertexCord() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByVertexCord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SimplifyTerrain() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimplifyTerrain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LoadModel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadModelContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UploadModelContent() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UploadModelContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadModelContent(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FindPathByVertexCord() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FindPathByVertexCord(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindPathByVertexCord(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SimplifyTerrain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SimplifyTerrain(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SimplifyTerrain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LoadModel(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LoadModel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadModelContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadModelContent() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->UploadModelContent(); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadModelContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadModelContent(::grpc::ServerContext* context, ::grpc::ServerReader< ::geodesic_gRPC::ModelContent>* reader, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* UploadModelContent() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::HelloRequest, ::geodesic_gRPC::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::HelloRequest,::geodesic_gRPC::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindPathByVertexCord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FindPathByVertexCord() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::FindPathByVertexCordRequest, ::geodesic_gRPC::Path>(std::bind(&WithStreamedUnaryMethod_FindPathByVertexCord<BaseClass>::StreamedFindPathByVertexCord, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindPathByVertexCord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindPathByVertexCord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::FindPathByVertexCordRequest,::geodesic_gRPC::Path>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimplifyTerrain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SimplifyTerrain() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::SimplifyTerrainRequest, ::geodesic_gRPC::ModelPath>(std::bind(&WithStreamedUnaryMethod_SimplifyTerrain<BaseClass>::StreamedSimplifyTerrain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SimplifyTerrain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimplifyTerrain(::grpc::ServerContext* context, const ::geodesic_gRPC::SimplifyTerrainRequest* request, ::geodesic_gRPC::ModelPath* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimplifyTerrain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::SimplifyTerrainRequest,::geodesic_gRPC::ModelPath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadModel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::ModelPath, ::geodesic_gRPC::TerrainInfo>(std::bind(&WithStreamedUnaryMethod_LoadModel<BaseClass>::StreamedLoadModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadModel(::grpc::ServerContext* context, const ::geodesic_gRPC::ModelPath* request, ::geodesic_gRPC::TerrainInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::ModelPath,::geodesic_gRPC::TerrainInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_FindPathByVertexCord<WithStreamedUnaryMethod_SimplifyTerrain<WithStreamedUnaryMethod_LoadModel<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_FindPathByVertexCord<WithStreamedUnaryMethod_SimplifyTerrain<WithStreamedUnaryMethod_LoadModel<Service > > > > StreamedService;
};

}  // namespace geodesic_gRPC


#endif  // GRPC_geodesic_2eproto__INCLUDED
