// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geodesic.proto

#include "geodesic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace geodesic_gRPC {
class HelloRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HelloRequest> _instance;
} _HelloRequest_default_instance_;
class HelloReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HelloReply> _instance;
} _HelloReply_default_instance_;
class FindPathByVertexCordRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindPathByVertexCordRequest> _instance;
} _FindPathByVertexCordRequest_default_instance_;
class SimplifyTerrainRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimplifyTerrainRequest> _instance;
} _SimplifyTerrainRequest_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class TerrainInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TerrainInfo> _instance;
} _TerrainInfo_default_instance_;
class ModelPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelPath> _instance;
} _ModelPath_default_instance_;
class ModelContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelContent> _instance;
} _ModelContent_default_instance_;
}  // namespace geodesic_gRPC
static void InitDefaultsHelloRequest_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_HelloRequest_default_instance_;
    new (ptr) ::geodesic_gRPC::HelloRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::HelloRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HelloRequest_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHelloRequest_geodesic_2eproto}, {}};

static void InitDefaultsHelloReply_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_HelloReply_default_instance_;
    new (ptr) ::geodesic_gRPC::HelloReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::HelloReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HelloReply_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHelloReply_geodesic_2eproto}, {}};

static void InitDefaultsFindPathByVertexCordRequest_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_FindPathByVertexCordRequest_default_instance_;
    new (ptr) ::geodesic_gRPC::FindPathByVertexCordRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::FindPathByVertexCordRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FindPathByVertexCordRequest_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFindPathByVertexCordRequest_geodesic_2eproto}, {}};

static void InitDefaultsSimplifyTerrainRequest_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_SimplifyTerrainRequest_default_instance_;
    new (ptr) ::geodesic_gRPC::SimplifyTerrainRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::SimplifyTerrainRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimplifyTerrainRequest_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimplifyTerrainRequest_geodesic_2eproto}, {}};

static void InitDefaultsPath_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_Path_default_instance_;
    new (ptr) ::geodesic_gRPC::Path();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::Path::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Path_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPath_geodesic_2eproto}, {}};

static void InitDefaultsTerrainInfo_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_TerrainInfo_default_instance_;
    new (ptr) ::geodesic_gRPC::TerrainInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::TerrainInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TerrainInfo_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTerrainInfo_geodesic_2eproto}, {}};

static void InitDefaultsModelPath_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_ModelPath_default_instance_;
    new (ptr) ::geodesic_gRPC::ModelPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::ModelPath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModelPath_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModelPath_geodesic_2eproto}, {}};

static void InitDefaultsModelContent_geodesic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geodesic_gRPC::_ModelContent_default_instance_;
    new (ptr) ::geodesic_gRPC::ModelContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geodesic_gRPC::ModelContent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModelContent_geodesic_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModelContent_geodesic_2eproto}, {}};

void InitDefaults_geodesic_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HelloRequest_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HelloReply_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindPathByVertexCordRequest_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimplifyTerrainRequest_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Path_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TerrainInfo_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelPath_geodesic_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelContent_geodesic_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_geodesic_2eproto[8];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_geodesic_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_geodesic_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_geodesic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::HelloRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::HelloReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::HelloReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::FindPathByVertexCordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::FindPathByVertexCordRequest, algo_type_),
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::FindPathByVertexCordRequest, v1_),
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::FindPathByVertexCordRequest, v2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::SimplifyTerrainRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::SimplifyTerrainRequest, beta_),
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::SimplifyTerrainRequest, old_model_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::Path, path_),
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::Path, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::TerrainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::TerrainInfo, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::ModelPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::ModelPath, model_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::ModelContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geodesic_gRPC::ModelContent, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::geodesic_gRPC::HelloRequest)},
  { 6, -1, sizeof(::geodesic_gRPC::HelloReply)},
  { 12, -1, sizeof(::geodesic_gRPC::FindPathByVertexCordRequest)},
  { 20, -1, sizeof(::geodesic_gRPC::SimplifyTerrainRequest)},
  { 27, -1, sizeof(::geodesic_gRPC::Path)},
  { 34, -1, sizeof(::geodesic_gRPC::TerrainInfo)},
  { 40, -1, sizeof(::geodesic_gRPC::ModelPath)},
  { 46, -1, sizeof(::geodesic_gRPC::ModelContent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_HelloRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_HelloReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_FindPathByVertexCordRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_SimplifyTerrainRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_TerrainInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_ModelPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geodesic_gRPC::_ModelContent_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_geodesic_2eproto = {
  {}, AddDescriptors_geodesic_2eproto, "geodesic.proto", schemas,
  file_default_instances, TableStruct_geodesic_2eproto::offsets,
  file_level_metadata_geodesic_2eproto, 8, file_level_enum_descriptors_geodesic_2eproto, file_level_service_descriptors_geodesic_2eproto,
};

const char descriptor_table_protodef_geodesic_2eproto[] =
  "\n\016geodesic.proto\022\rgeodesic_gRPC\"\034\n\014Hello"
  "Request\022\014\n\004name\030\001 \001(\t\"\035\n\nHelloReply\022\017\n\007m"
  "essage\030\001 \001(\t\"H\n\033FindPathByVertexCordRequ"
  "est\022\021\n\talgo_type\030\001 \001(\t\022\n\n\002v1\030\002 \001(\t\022\n\n\002v2"
  "\030\003 \001(\t\">\n\026SimplifyTerrainRequest\022\014\n\004beta"
  "\030\001 \001(\002\022\026\n\016old_model_path\030\002 \001(\t\"%\n\004Path\022\014"
  "\n\004path\030\001 \003(\002\022\017\n\007message\030\002 \001(\t\"\033\n\013Terrain"
  "Info\022\014\n\004info\030\001 \001(\t\"\037\n\tModelPath\022\022\n\nmodel"
  "_path\030\001 \001(\t\"\037\n\014ModelContent\022\017\n\007content\030\001"
  " \001(\t2\227\003\n\010Geodesic\022D\n\010SayHello\022\033.geodesic"
  "_gRPC.HelloRequest\032\031.geodesic_gRPC.Hello"
  "Reply\"\000\022Y\n\024FindPathByVertexCord\022*.geodes"
  "ic_gRPC.FindPathByVertexCordRequest\032\023.ge"
  "odesic_gRPC.Path\"\000\022T\n\017SimplifyTerrain\022%."
  "geodesic_gRPC.SimplifyTerrainRequest\032\030.g"
  "eodesic_gRPC.ModelPath\"\000\022C\n\tLoadModel\022\030."
  "geodesic_gRPC.ModelPath\032\032.geodesic_gRPC."
  "TerrainInfo\"\000\022O\n\022UploadModelContent\022\033.ge"
  "odesic_gRPC.ModelContent\032\030.geodesic_gRPC"
  ".ModelPath\"\000(\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_geodesic_2eproto = {
  false, InitDefaults_geodesic_2eproto, 
  descriptor_table_protodef_geodesic_2eproto,
  "geodesic.proto", &assign_descriptors_table_geodesic_2eproto, 782,
};

void AddDescriptors_geodesic_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_geodesic_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_geodesic_2eproto = []() { AddDescriptors_geodesic_2eproto(); return true; }();
namespace geodesic_gRPC {

// ===================================================================

void HelloRequest::InitAsDefaultInstance() {
}
class HelloRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloRequest::HelloRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.HelloRequest)
}

void HelloRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HelloRequest_geodesic_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.HelloRequest)
  SharedDtor();
}

void HelloRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HelloRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloRequest& HelloRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HelloRequest_geodesic_2eproto.base);
  return *internal_default_instance();
}


void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.HelloRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HelloRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.HelloRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.HelloRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.HelloRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.HelloRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.HelloRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.HelloRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.HelloRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.HelloRequest)
}

::google::protobuf::uint8* HelloRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.HelloRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.HelloRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.HelloRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HelloRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.HelloRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.HelloRequest)
    MergeFrom(*source);
  }
}

void HelloRequest::MergeFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.HelloRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void HelloRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::Swap(HelloRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HelloRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HelloReply::InitAsDefaultInstance() {
}
class HelloReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloReply::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloReply::HelloReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.HelloReply)
}
HelloReply::HelloReply(const HelloReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.HelloReply)
}

void HelloReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HelloReply_geodesic_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HelloReply::~HelloReply() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.HelloReply)
  SharedDtor();
}

void HelloReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HelloReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloReply& HelloReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HelloReply_geodesic_2eproto.base);
  return *internal_default_instance();
}


void HelloReply::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.HelloReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HelloReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.HelloReply.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.HelloReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.HelloReply.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.HelloReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.HelloReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.HelloReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.HelloReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.HelloReply)
}

::google::protobuf::uint8* HelloReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.HelloReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.HelloReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.HelloReply)
  return target;
}

size_t HelloReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.HelloReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloReply* source =
      ::google::protobuf::DynamicCastToGenerated<HelloReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.HelloReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.HelloReply)
    MergeFrom(*source);
  }
}

void HelloReply::MergeFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.HelloReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void HelloReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReply::CopyFrom(const HelloReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.HelloReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReply::IsInitialized() const {
  return true;
}

void HelloReply::Swap(HelloReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloReply::InternalSwap(HelloReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HelloReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FindPathByVertexCordRequest::InitAsDefaultInstance() {
}
class FindPathByVertexCordRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindPathByVertexCordRequest::kAlgoTypeFieldNumber;
const int FindPathByVertexCordRequest::kV1FieldNumber;
const int FindPathByVertexCordRequest::kV2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindPathByVertexCordRequest::FindPathByVertexCordRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.FindPathByVertexCordRequest)
}
FindPathByVertexCordRequest::FindPathByVertexCordRequest(const FindPathByVertexCordRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.algo_type().size() > 0) {
    algo_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_type_);
  }
  v1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.v1().size() > 0) {
    v1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v1_);
  }
  v2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.v2().size() > 0) {
    v2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v2_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.FindPathByVertexCordRequest)
}

void FindPathByVertexCordRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FindPathByVertexCordRequest_geodesic_2eproto.base);
  algo_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FindPathByVertexCordRequest::~FindPathByVertexCordRequest() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.FindPathByVertexCordRequest)
  SharedDtor();
}

void FindPathByVertexCordRequest::SharedDtor() {
  algo_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FindPathByVertexCordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindPathByVertexCordRequest& FindPathByVertexCordRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FindPathByVertexCordRequest_geodesic_2eproto.base);
  return *internal_default_instance();
}


void FindPathByVertexCordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.FindPathByVertexCordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algo_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FindPathByVertexCordRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FindPathByVertexCordRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string algo_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.FindPathByVertexCordRequest.algo_type");
        object = msg->mutable_algo_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string v1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.FindPathByVertexCordRequest.v1");
        object = msg->mutable_v1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string v2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.FindPathByVertexCordRequest.v2");
        object = msg->mutable_v2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FindPathByVertexCordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.FindPathByVertexCordRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string algo_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->algo_type().data(), static_cast<int>(this->algo_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.FindPathByVertexCordRequest.algo_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string v1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->v1().data(), static_cast<int>(this->v1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.FindPathByVertexCordRequest.v1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string v2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->v2().data(), static_cast<int>(this->v2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.FindPathByVertexCordRequest.v2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.FindPathByVertexCordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.FindPathByVertexCordRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FindPathByVertexCordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.FindPathByVertexCordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algo_type = 1;
  if (this->algo_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algo_type().data(), static_cast<int>(this->algo_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.algo_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->algo_type(), output);
  }

  // string v1 = 2;
  if (this->v1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v1().data(), static_cast<int>(this->v1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.v1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->v1(), output);
  }

  // string v2 = 3;
  if (this->v2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v2().data(), static_cast<int>(this->v2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.v2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->v2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.FindPathByVertexCordRequest)
}

::google::protobuf::uint8* FindPathByVertexCordRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.FindPathByVertexCordRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algo_type = 1;
  if (this->algo_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->algo_type().data(), static_cast<int>(this->algo_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.algo_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->algo_type(), target);
  }

  // string v1 = 2;
  if (this->v1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v1().data(), static_cast<int>(this->v1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.v1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->v1(), target);
  }

  // string v2 = 3;
  if (this->v2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->v2().data(), static_cast<int>(this->v2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.FindPathByVertexCordRequest.v2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->v2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.FindPathByVertexCordRequest)
  return target;
}

size_t FindPathByVertexCordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.FindPathByVertexCordRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algo_type = 1;
  if (this->algo_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->algo_type());
  }

  // string v1 = 2;
  if (this->v1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v1());
  }

  // string v2 = 3;
  if (this->v2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->v2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindPathByVertexCordRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.FindPathByVertexCordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindPathByVertexCordRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FindPathByVertexCordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.FindPathByVertexCordRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.FindPathByVertexCordRequest)
    MergeFrom(*source);
  }
}

void FindPathByVertexCordRequest::MergeFrom(const FindPathByVertexCordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.FindPathByVertexCordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algo_type().size() > 0) {

    algo_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algo_type_);
  }
  if (from.v1().size() > 0) {

    v1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v1_);
  }
  if (from.v2().size() > 0) {

    v2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v2_);
  }
}

void FindPathByVertexCordRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.FindPathByVertexCordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindPathByVertexCordRequest::CopyFrom(const FindPathByVertexCordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.FindPathByVertexCordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPathByVertexCordRequest::IsInitialized() const {
  return true;
}

void FindPathByVertexCordRequest::Swap(FindPathByVertexCordRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindPathByVertexCordRequest::InternalSwap(FindPathByVertexCordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  algo_type_.Swap(&other->algo_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  v1_.Swap(&other->v1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  v2_.Swap(&other->v2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FindPathByVertexCordRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SimplifyTerrainRequest::InitAsDefaultInstance() {
}
class SimplifyTerrainRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimplifyTerrainRequest::kBetaFieldNumber;
const int SimplifyTerrainRequest::kOldModelPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimplifyTerrainRequest::SimplifyTerrainRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.SimplifyTerrainRequest)
}
SimplifyTerrainRequest::SimplifyTerrainRequest(const SimplifyTerrainRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_model_path().size() > 0) {
    old_model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_model_path_);
  }
  beta_ = from.beta_;
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.SimplifyTerrainRequest)
}

void SimplifyTerrainRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SimplifyTerrainRequest_geodesic_2eproto.base);
  old_model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beta_ = 0;
}

SimplifyTerrainRequest::~SimplifyTerrainRequest() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.SimplifyTerrainRequest)
  SharedDtor();
}

void SimplifyTerrainRequest::SharedDtor() {
  old_model_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimplifyTerrainRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimplifyTerrainRequest& SimplifyTerrainRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SimplifyTerrainRequest_geodesic_2eproto.base);
  return *internal_default_instance();
}


void SimplifyTerrainRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.SimplifyTerrainRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beta_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimplifyTerrainRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SimplifyTerrainRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float beta = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_beta(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // string old_model_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.SimplifyTerrainRequest.old_model_path");
        object = msg->mutable_old_model_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimplifyTerrainRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.SimplifyTerrainRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float beta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string old_model_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_model_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_model_path().data(), static_cast<int>(this->old_model_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.SimplifyTerrainRequest.old_model_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.SimplifyTerrainRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.SimplifyTerrainRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimplifyTerrainRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.SimplifyTerrainRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float beta = 1;
  if (this->beta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->beta(), output);
  }

  // string old_model_path = 2;
  if (this->old_model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_model_path().data(), static_cast<int>(this->old_model_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.SimplifyTerrainRequest.old_model_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_model_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.SimplifyTerrainRequest)
}

::google::protobuf::uint8* SimplifyTerrainRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.SimplifyTerrainRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float beta = 1;
  if (this->beta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->beta(), target);
  }

  // string old_model_path = 2;
  if (this->old_model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_model_path().data(), static_cast<int>(this->old_model_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.SimplifyTerrainRequest.old_model_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_model_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.SimplifyTerrainRequest)
  return target;
}

size_t SimplifyTerrainRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.SimplifyTerrainRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string old_model_path = 2;
  if (this->old_model_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_model_path());
  }

  // float beta = 1;
  if (this->beta() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimplifyTerrainRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.SimplifyTerrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SimplifyTerrainRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SimplifyTerrainRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.SimplifyTerrainRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.SimplifyTerrainRequest)
    MergeFrom(*source);
  }
}

void SimplifyTerrainRequest::MergeFrom(const SimplifyTerrainRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.SimplifyTerrainRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.old_model_path().size() > 0) {

    old_model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_model_path_);
  }
  if (from.beta() != 0) {
    set_beta(from.beta());
  }
}

void SimplifyTerrainRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.SimplifyTerrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplifyTerrainRequest::CopyFrom(const SimplifyTerrainRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.SimplifyTerrainRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplifyTerrainRequest::IsInitialized() const {
  return true;
}

void SimplifyTerrainRequest::Swap(SimplifyTerrainRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimplifyTerrainRequest::InternalSwap(SimplifyTerrainRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  old_model_path_.Swap(&other->old_model_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(beta_, other->beta_);
}

::google::protobuf::Metadata SimplifyTerrainRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kPathFieldNumber;
const int Path::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.Path)
}

void Path::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Path_geodesic_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Path_geodesic_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Path::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Path*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated float path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_path();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        do {
          msg->add_path(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 13 && (ptr += 1));
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.Path.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.Path)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_path())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.Path.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.Path)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float path = 1;
  if (this->path_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_path_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->path().data(), this->path_size(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.Path.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float path = 1;
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _path_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->path_, target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.Path.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.Path)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Path::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TerrainInfo::InitAsDefaultInstance() {
}
class TerrainInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerrainInfo::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerrainInfo::TerrainInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.TerrainInfo)
}
TerrainInfo::TerrainInfo(const TerrainInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.TerrainInfo)
}

void TerrainInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TerrainInfo_geodesic_2eproto.base);
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TerrainInfo::~TerrainInfo() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.TerrainInfo)
  SharedDtor();
}

void TerrainInfo::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TerrainInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerrainInfo& TerrainInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TerrainInfo_geodesic_2eproto.base);
  return *internal_default_instance();
}


void TerrainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TerrainInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TerrainInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.TerrainInfo.info");
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TerrainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.TerrainInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.TerrainInfo.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.TerrainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.TerrainInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TerrainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.TerrainInfo.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.TerrainInfo)
}

::google::protobuf::uint8* TerrainInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.TerrainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string info = 1;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.TerrainInfo.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.TerrainInfo)
  return target;
}

size_t TerrainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.TerrainInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 1;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerrainInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.TerrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TerrainInfo* source =
      ::google::protobuf::DynamicCastToGenerated<TerrainInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.TerrainInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.TerrainInfo)
    MergeFrom(*source);
  }
}

void TerrainInfo::MergeFrom(const TerrainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.TerrainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
}

void TerrainInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.TerrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerrainInfo::CopyFrom(const TerrainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.TerrainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerrainInfo::IsInitialized() const {
  return true;
}

void TerrainInfo::Swap(TerrainInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerrainInfo::InternalSwap(TerrainInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TerrainInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModelPath::InitAsDefaultInstance() {
}
class ModelPath::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelPath::kModelPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelPath::ModelPath()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.ModelPath)
}
ModelPath::ModelPath(const ModelPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_path().size() > 0) {
    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.ModelPath)
}

void ModelPath::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModelPath_geodesic_2eproto.base);
  model_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModelPath::~ModelPath() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.ModelPath)
  SharedDtor();
}

void ModelPath::SharedDtor() {
  model_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModelPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelPath& ModelPath::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModelPath_geodesic_2eproto.base);
  return *internal_default_instance();
}


void ModelPath::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.ModelPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelPath::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModelPath*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string model_path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.ModelPath.model_path");
        object = msg->mutable_model_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.ModelPath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_path().data(), static_cast<int>(this->model_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.ModelPath.model_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.ModelPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.ModelPath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.ModelPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), static_cast<int>(this->model_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.ModelPath.model_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.ModelPath)
}

::google::protobuf::uint8* ModelPath::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.ModelPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_path().data(), static_cast<int>(this->model_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.ModelPath.model_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.ModelPath)
  return target;
}

size_t ModelPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.ModelPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_path = 1;
  if (this->model_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.ModelPath)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelPath* source =
      ::google::protobuf::DynamicCastToGenerated<ModelPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.ModelPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.ModelPath)
    MergeFrom(*source);
  }
}

void ModelPath::MergeFrom(const ModelPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.ModelPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_path().size() > 0) {

    model_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_path_);
  }
}

void ModelPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.ModelPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelPath::CopyFrom(const ModelPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.ModelPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPath::IsInitialized() const {
  return true;
}

void ModelPath::Swap(ModelPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelPath::InternalSwap(ModelPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_path_.Swap(&other->model_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ModelPath::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModelContent::InitAsDefaultInstance() {
}
class ModelContent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelContent::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelContent::ModelContent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geodesic_gRPC.ModelContent)
}
ModelContent::ModelContent(const ModelContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:geodesic_gRPC.ModelContent)
}

void ModelContent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModelContent_geodesic_2eproto.base);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModelContent::~ModelContent() {
  // @@protoc_insertion_point(destructor:geodesic_gRPC.ModelContent)
  SharedDtor();
}

void ModelContent::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModelContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelContent& ModelContent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModelContent_geodesic_2eproto.base);
  return *internal_default_instance();
}


void ModelContent::Clear() {
// @@protoc_insertion_point(message_clear_start:geodesic_gRPC.ModelContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelContent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModelContent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geodesic_gRPC.ModelContent.content");
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geodesic_gRPC.ModelContent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "geodesic_gRPC.ModelContent.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geodesic_gRPC.ModelContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geodesic_gRPC.ModelContent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geodesic_gRPC.ModelContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.ModelContent.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geodesic_gRPC.ModelContent)
}

::google::protobuf::uint8* ModelContent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geodesic_gRPC.ModelContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "geodesic_gRPC.ModelContent.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geodesic_gRPC.ModelContent)
  return target;
}

size_t ModelContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geodesic_gRPC.ModelContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geodesic_gRPC.ModelContent)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelContent* source =
      ::google::protobuf::DynamicCastToGenerated<ModelContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geodesic_gRPC.ModelContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geodesic_gRPC.ModelContent)
    MergeFrom(*source);
  }
}

void ModelContent::MergeFrom(const ModelContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geodesic_gRPC.ModelContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ModelContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geodesic_gRPC.ModelContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelContent::CopyFrom(const ModelContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geodesic_gRPC.ModelContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelContent::IsInitialized() const {
  return true;
}

void ModelContent::Swap(ModelContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelContent::InternalSwap(ModelContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ModelContent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_geodesic_2eproto);
  return ::file_level_metadata_geodesic_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geodesic_gRPC
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::HelloRequest* Arena::CreateMaybeMessage< ::geodesic_gRPC::HelloRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::HelloReply* Arena::CreateMaybeMessage< ::geodesic_gRPC::HelloReply >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::HelloReply >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::FindPathByVertexCordRequest* Arena::CreateMaybeMessage< ::geodesic_gRPC::FindPathByVertexCordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::FindPathByVertexCordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::SimplifyTerrainRequest* Arena::CreateMaybeMessage< ::geodesic_gRPC::SimplifyTerrainRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::SimplifyTerrainRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::Path* Arena::CreateMaybeMessage< ::geodesic_gRPC::Path >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::TerrainInfo* Arena::CreateMaybeMessage< ::geodesic_gRPC::TerrainInfo >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::TerrainInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::ModelPath* Arena::CreateMaybeMessage< ::geodesic_gRPC::ModelPath >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::ModelPath >(arena);
}
template<> PROTOBUF_NOINLINE ::geodesic_gRPC::ModelContent* Arena::CreateMaybeMessage< ::geodesic_gRPC::ModelContent >(Arena* arena) {
  return Arena::CreateInternal< ::geodesic_gRPC::ModelContent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
